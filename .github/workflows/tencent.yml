# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE) when there is a push to the master branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster, 
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: 
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key 
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).
- name: Docker Setup Buildx
  # You may pin to the exact commit or the version.
  # uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25
  uses: docker/setup-buildx-action@v1.6.0
  with:
    # Buildx version. (eg. v0.3.0)
    version: # optional
    # Sets the builder driver to be used
    driver: # optional, default is docker-container
    # List of additional driver-specific options. (eg. image=moby/buildkit:master)
    driver-opts: # optional
    # Flags for buildkitd daemon
    buildkitd-flags: # optional, default is --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
    # Sets up docker build command as an alias to docker buildx
    install: # optional, default is false
    # Switch to this builder instance
    use: # optional, default is true
    # Optional address for docker socket or context from `docker context ls`
    endpoint: # optional
    # BuildKit config file
    config: # optional
    # Inline BuildKit config
    config-inline: # optional

name: Tencent Kubernetes Engine

on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_IMAGE_URL: ccr.ccs.tencentyun.com/demo/mywebapp
  TKE_REGION: ap-guangzhou
  TKE_CLUSTER_ID: cls-mywebapp
  DEPLOYMENT_NAME: tke-test

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      
    # Build
    - name: Build Docker image
      run: |        
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: Login TKE Registry
      run: |
        docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p '${{ secrets.TKE_REGISTRY_PASSWORD }}' ${TKE_IMAGE_URL}

    # Push the Docker image to TKE Registry
    - name: Publish
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Set up Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Set up ~/.kube/config for connecting TKE cluster
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}
    
    - name: Switch to TKE context
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default

    # Deploy the Docker image to the TKE cluster
    - name: Deploy
      run: |
        ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get services -o wide

- name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v1.9.0
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
    dotnet-version: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Whether prerelease versions should be matched with non-exact versions (for example 5.0.0-preview.6 being matched by 5, 5.0, 5.x or 5.0.x). Defaults to false if not provided.
    include-prerelease: # optional

- name: Ngrok TCP Tunelling
  # You may pin to the exact commit or the version.
  # uses: apogiatzis/ngrok-tunneling-action@a88c9e0ef5b0f1932a5715f210f2fde239fc2630
  uses: apogiatzis/ngrok-tunneling-action@v0.1.4
  with:
    # Challenge deployment timeout
    timeout: # default is 1h
    # The port to forward traffic to
    port: 
    # Ngrok authorization token
    ngrok_authtoken: 

- name: ngrok-tunnel
  # You may pin to the exact commit or the version.
  # uses: vmactions/ngrok-tunnel@e28904799027c5dd65566e0179fb8d7097972ea4
  uses: vmactions/ngrok-tunnel@v0.0.1
  with:
    # tcp or http
    protocol: # optional
    # port to forward to
    port: 
